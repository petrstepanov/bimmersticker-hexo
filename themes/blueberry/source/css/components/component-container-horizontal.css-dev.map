{"version":3,"sources":["component-container-horizontal.scss","component-container-horizontal.css","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAUA;EAEI,qBAAA;EACA,4BAAA;EACA,kBAAA;ACVJ;ADeI;EACI,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,SAfI;EAkBJ,uBAAA;EAAA,kBAAA;ACfR;ADkBQ;EACI,gBAAA;AChBZ;ADkBY;EACI,iBAAA;AChBhB;AC8CI;EF/BQ;IAGQ,+CAAA;ECdlB;AACF;ACyCI;EF/BQ;IAMQ,+CAAA;ECZlB;AACF;ACoCI;EF/BQ;IASQ,+CAAA;ECVlB;AACF;AC+BI;EF/BQ;IAYQ,gDAAA;ECRlB;AACF;ADWY;EACI,kBAAA;ACThB;ACuBI;EFfQ;IAGQ,gDAAA;ECPlB;AACF;ACkBI;EFfQ;IAMQ,gDAAA;ECLlB;AACF;ACaI;EFfQ;IASQ,gDAAA;ECHlB;AACF;ACQI;EFfQ;IAYQ,iDAAA;ECDlB;AACF;ADMI;EACI,gBAAA;EACA,WAAA;EACA,SAAA;EACA,OAAA;EACA,kBAAA;ACJR;ADMQ;EACI,8BAAA;ACJZ","file":"component-container-horizontal.css","sourcesContent":["// To access bootstrap containers width\n// https://sass-lang.com/documentation/values/maps/\n@use \"sass:map\";\n\n@import \"../../node_modules/bootstrap/scss/functions\";\n@import \"../../node_modules/bootstrap/scss/variables\";\n@import \"../../node_modules/bootstrap/scss/mixins\";\n\n$cards-gap: 2rem;\n\n.component-container-horizontal {\n    // Override kinetic.js settings\n    outline: 0 !important;\n    cursor: ew-resize !important;\n    overflow-x: scroll;\n\n    // This Kills kinetic scroll in Chrome\n    // scroll-behavior: smooth;\n\n    .container-horizontal-inner {\n        display: flex;\n        flex-direction: row;\n        align-items: flex-start;\n        gap: $cards-gap;\n\n        // Needed to layout the inner container\n        width: min-content;\n\n        // Left Margin for first and right margin for last card\n        .container-horizontal-card {\n            min-width: 15rem;\n\n            &:first-child{\n                margin-left: 15px;\n                @include media-breakpoint-up(sm) {\n                    margin-left: calc((100vw - map.get($container-max-widths, \"sm\"))*0.5 + 15px); // 15px is bootstrap row margin\n                }\n                @include media-breakpoint-up(md) {\n                    margin-left: calc((100vw - map.get($container-max-widths, \"md\"))*0.5 + 15px); // 15px is bootstrap row margin\n                }\n                @include media-breakpoint-up(lg) {\n                    margin-left: calc((100vw - map.get($container-max-widths, \"lg\"))*0.5 + 15px); // 15px is bootstrap row margin\n                }\n                @include media-breakpoint-up(xl) {\n                    margin-left: calc((100vw - map.get($container-max-widths, \"xl\"))*0.5 + 15px); // 15px is bootstrap row margin\n                }\n            }\n\n            &:last-child{\n                margin-right: 15px;\n                @include media-breakpoint-up(sm) {\n                    margin-right: calc((100vw - map.get($container-max-widths, \"sm\"))*0.5 + 15px); // 15px is bootstrap row margin\n                }\n                @include media-breakpoint-up(md) {\n                    margin-right: calc((100vw - map.get($container-max-widths, \"md\"))*0.5 + 15px); // 15px is bootstrap row margin\n                }\n                @include media-breakpoint-up(lg) {\n                    margin-right: calc((100vw - map.get($container-max-widths, \"lg\"))*0.5 + 15px); // 15px is bootstrap row margin\n                }\n                @include media-breakpoint-up(xl) {\n                    margin-right: calc((100vw - map.get($container-max-widths, \"xl\"))*0.5 + 15px); // 15px is bootstrap row margin\n                }\n            }\n        }\n    }\n\n    .swipe-hint {\n        position: sticky;\n        width: 100%;\n        bottom: 0;\n        left: 0;\n        text-align: center;\n\n        svg {\n            fill: var(--bs-tertiary-color)\n        }\n    }\n}",".component-container-horizontal {\n  outline: 0 !important;\n  cursor: ew-resize !important;\n  overflow-x: scroll;\n}\n.component-container-horizontal .container-horizontal-inner {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  gap: 2rem;\n  width: min-content;\n}\n.component-container-horizontal .container-horizontal-inner .container-horizontal-card {\n  min-width: 15rem;\n}\n.component-container-horizontal .container-horizontal-inner .container-horizontal-card:first-child {\n  margin-left: 15px;\n}\n@media (min-width: 576px) {\n  .component-container-horizontal .container-horizontal-inner .container-horizontal-card:first-child {\n    margin-left: calc((100vw - 540px) * 0.5 + 15px);\n  }\n}\n@media (min-width: 768px) {\n  .component-container-horizontal .container-horizontal-inner .container-horizontal-card:first-child {\n    margin-left: calc((100vw - 720px) * 0.5 + 15px);\n  }\n}\n@media (min-width: 992px) {\n  .component-container-horizontal .container-horizontal-inner .container-horizontal-card:first-child {\n    margin-left: calc((100vw - 960px) * 0.5 + 15px);\n  }\n}\n@media (min-width: 1200px) {\n  .component-container-horizontal .container-horizontal-inner .container-horizontal-card:first-child {\n    margin-left: calc((100vw - 1140px) * 0.5 + 15px);\n  }\n}\n.component-container-horizontal .container-horizontal-inner .container-horizontal-card:last-child {\n  margin-right: 15px;\n}\n@media (min-width: 576px) {\n  .component-container-horizontal .container-horizontal-inner .container-horizontal-card:last-child {\n    margin-right: calc((100vw - 540px) * 0.5 + 15px);\n  }\n}\n@media (min-width: 768px) {\n  .component-container-horizontal .container-horizontal-inner .container-horizontal-card:last-child {\n    margin-right: calc((100vw - 720px) * 0.5 + 15px);\n  }\n}\n@media (min-width: 992px) {\n  .component-container-horizontal .container-horizontal-inner .container-horizontal-card:last-child {\n    margin-right: calc((100vw - 960px) * 0.5 + 15px);\n  }\n}\n@media (min-width: 1200px) {\n  .component-container-horizontal .container-horizontal-inner .container-horizontal-card:last-child {\n    margin-right: calc((100vw - 1140px) * 0.5 + 15px);\n  }\n}\n.component-container-horizontal .swipe-hint {\n  position: sticky;\n  width: 100%;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n}\n.component-container-horizontal .swipe-hint svg {\n  fill: var(--bs-tertiary-color);\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}